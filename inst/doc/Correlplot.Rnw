\documentclass[a4paper]{article}

% \VignetteIndexEntry{A R package for visualizing correlation matrices.}
% \VignetteDepends{graphics,stats}
% \VignetteKeyword{multivariate}

% Documentation for the Correlplot package

\usepackage[english]{babel}
\usepackage{Sweave}
% \usepackage{Rd}
\usepackage{url}
\usepackage{wrapfig}
\usepackage{hyperref}
\usepackage{natbib}
\usepackage[utf8]{inputenc}

\setlength{\parindent}{0cm}

\newcommand{\bF}{\ensuremath{\mathbf F}}
\newcommand{\bG}{\ensuremath{\mathbf G}}
\newcommand{\bR}{\ensuremath{\mathbf R}}
\newcommand{\bhat}[1]{\mathbf{\hat{\rm #1}}}

\newcommand{\pkg}[1]{{\normalfont\fontseries{b}\selectfont #1}} 
\let\proglang=\textit
\let\code=\texttt 
\renewcommand{\title}[1]{\begin{center}{\bf \LARGE #1}\end{center}}
\newcommand{\affiliations}{\footnotesize}
\newcommand{\keywords}{\paragraph{Keywords:}}

\begin{document}
\SweaveOpts{concordance=TRUE}

\begin{center}
\sf
{\sf \bf \Large Correlplot: a collection of functions for the graphical representation of correlation matrices}\\
\vspace{4mm}
{\sf \normalsize {\tt version 1.0.3}}\\%\normalsize
\vspace{4mm}
{\bf \large Jan Graffelman}$^{\dagger,\ddagger}$\\
\vspace{4mm} \rm \large
$^\dagger$Department of Statistics and Operations Research\\
Universitat Polit\`ecnica de Catalunya\\
Avinguda Diagonal 647, 08028 Barcelona, Spain.\\
jan.graffelman@upc.edu\\

\vspace{4mm}

$^\ddagger$Department of Biostatistics\\
University of Washington\\
University Tower, 15th Floor\\
4333 Brooklyn Avenue\\
Seattle, WA 98105-9461\\

\vspace{2mm}

{\sc September 2022}

\end{center}

\section{Introduction}

This documents gives some instructions on how to create graphical representations of correlation matrices in the statistical environment \proglang{R}~\citep{RRR} using package \pkg{Correlplot}, using a variety of different statistical methods. We use 
principal component analysis (PCA), multidimensional scaling (MDS), principal factor analysis (PFA), weighted alternating least squares (WALS), correlograms (CRG) and corrgrams to produces displays of correlation structure.  The outline of this vignette is as follows. Section~\ref{sec:install} explains how to install the \pkg{Correlplot} package. Section~\ref{sec:pictures} shows how to use the functions of the package for creating all graphical representaions (biplots, correlograms, MDS maps, etc.) for a given correlation matrix. The computation of goodness-of-fit statistics is also addressed. All methods are illustrated on a single data set, the wheat kernel 
data introduced below.

\section{Installation}
\label{sec:install}

The package \pkg{Correlplot} can be installed in \proglang{R} by typing:

\begin{verbatim}
install.packages("Correlplot")
library("Correlplot")
\end{verbatim}

<<echo=FALSE>>=
#install.packages("Correlplot")
library("Correlplot")
@

This will download \pkg{Correlplot} from the CRAN server. This instruction will make, among others, the functions {\tt correlogram}, {\tt pfa}, {\tt ipSymLS} and {\tt rmse} available. Some data sets and correlation matrices are included in the package, and can be accessed with the \code{data} instruction. By typing the instruction \code{data(package="Correlplot")} a list of all correlation and data matrices available in the package will appear. We will also make use of the packages \pkg{calibrate}, \pkg{corrgram} and 
\pkg{xtable}, and first connect these:

<<echo=TRUE>>=
#install.packages("calibrate")
#install.packages("corrplot")
#install.packages("xtable")
library(calibrate)
library(corrplot)
library(xtable)
@

\section{Graphical representations of a correlation matrix}
\label{sec:pictures}

In this section we indicate how to create different plots of a correlation matrix, and how to obtain the goodness-of-fit of the displays. We will subsequently treat
the corrgram, the correlogram, the PCA-based correlation biplot, the PFA-based correlation biplot, an MDS-based map of correlation structure and WALS-based correlation biplots. Throughout this vignette, we will use a wheat kernel
data set taken from the UCI Machine Learning Repository (\url{https://archive.ics.uci.edu/ml/datasets/seeds}) in order to illustrate the different plots. 

The wheat kernel data~\citep{Charytanowicz} consists of 210 wheat kernels, of which the variables 
{\it area} ($A$), {\it perimeter} ($P$), {\it compactness} ($C = 4*\pi*A/P^2$), 
{\it length}, {\it width}, {\it asymmetry coefficient} and {\it groove} (length of kernel groove) were registered. There are 70 kernels of each of the varieties {\it Kama}, {\it Rosa} and {\it Canadian}; here we will only use the kernels of variety 
{\it Kama}. The data is made available with: 

<<echo=TRUE>>=
library(Correlplot)
data("Kernels")
X <- Kernels[Kernels$variety==1,]
X <- X[,-8]
head(X)
@

The correlation matrix of the variables is given by:

<<echo=TRUE,results=tex>>=
R <- cor(X)
xtable(R,digits=3)
@

\paragraph{The corrgram}

The corrgram~(\citep{Friendly}) is a tabular display of the entries of a correlation matrix that uses colour and shading to represent correlations. Corrgrams can be made with the fuction {\tt corrplot}. 

\begin{figure}[htb]
\centering
<<echo=TRUE,fig=TRUE>>=
#install.packages("corrplot")
library(corrplot)
R <- cor(X)
corrplot(R, method="circle",type="lower")
@
\end{figure}

This shows most correlations are positive, and correlations with {\it asymmetry} are weak.

\clearpage

\paragraph{The correlogram}

The correlogram~(\citep{Trosset}) represents correlations by the cosines between vectors. 

<<echo=TRUE,fig=TRUE>>=
theta.cos <- correlogram(R,main="Correlogram wheat kernels",
            xlim=c(-1.3,1.3),ylim=c(-1.3,1.3))
@ 

The approximation this gives to the correlation matrix calculated by

<<echo=TRUE>>=
Rhat.cor <- angleToR(theta.cos)
@ 

and the root mean squared error (RMSE) of the approximation, is calculated as

<<echo=TRUE>>=
rmse.crg <- rmse(R,Rhat.cor,verbose=TRUE)
@

which shows this representation has a large amount of error. The correlogram can be modified by
using a linear interpretation rule, rendering correlations linear in the 
angle~\citep{Graffel23}. This representation is obtained by:

\begin{figure}[htb]
\centering
<<echo=TRUE,fig=TRUE>>=
theta.lin <- correlogram(R,ifun="lincos",labs=colnames(R),
                         main="Linear Correlogram",
                         xlim=c(-1.3,1.3),ylim=c(-1.3,1.3))
@
\end{figure}
\clearpage

The approximation to the correlation matrix by using this linear interpretation function is calculated by

<<echo=TRUE>>=
Rhat.corlin <- angleToR(theta.lin,ifun="lincos")
rmse.lin <- rmse(R,Rhat.corlin,verbose=TRUE)
@ 

The linear representation is seen to improve the approximation. 

\paragraph{The PCA biplot of the correlation matrix} 
We create a PCA biplot of the correlation matrix, doing the calcutions for a PCA by hand, using the singular value decomposition of the (scaled) standardized data. Alternatively, standard R function \code{princomp} may be used to obtain the coordinates needed for the correlation biplot. We use function \code{bplot} from package \pkg{calibrate} to make the biplot:

\newpage

\begin{figure}[htb]
\centering
<<biplot,echo=TRUE,fig=TRUE>>=
n <- nrow(X)
Xt <- scale(X)/sqrt(n)
res.svd <- svd(Xt)
Fs <- sqrt(n)*res.svd$u
Gp <- res.svd$v%*%diag(res.svd$d)
bplot(Fs,Gp,colch=NA,collab=colnames(X),
      xlab = "First principal component",
      ylab="Second principal component")
@
\end{figure}

\clearpage

The joint representation of kernels and variables emphasizes this is a biplot of the (standardized) data matrix. However, this plot is a {\it double biplot} because scalar products between variable vectors approximate the correlation matrix. We stress this by
plotting the variable vectors only, and adding a unit circle:

\begin{figure}[htb]
\centering
<<echo=TRUE,fig=TRUE>>=
bplot(Gp,Gp,colch=NA,rowch=NA,collab=colnames(X),
      xl=c(-1,1),yl=c(-1,1))
circle()
@
\end{figure}

The PCA biplot of the correlation matrix can be obtained from a correlation-based PCA or also directly from the spectral decomposition of the correlation matrix. The rank two approximation, by scalar products between vectors, and the RMSE are calculated by:

<<echo=TRUE>>=
Rhat.pca <- Gp[,1:2]%*%t(Gp[,1:2])
rmse.pca <- rmse(R,Rhat.pca,verbose=TRUE)
@

which is a considerable improvement over the previous correlograms. 

\clearpage

\paragraph{The MDS map of a correlation matrix}

We transform correlations to distances with the $\sqrt{2(1-r)}$ transformation, and use
the {\tt cmdscale} function from the \pkg{stats} package to perform metric multidimensional scaling. We mark negative correlations with a dashed red line.

\begin{figure}[htb]
\centering
<<echo=TRUE,fig=TRUE>>=
Di <- sqrt(2*(1-R))
out.mds <- cmdscale(Di,eig = TRUE)
Fp <- out.mds$points
plot(Fp[,1],Fp[,2],asp=1,xlab="First principal axis",
     ylab="Second principal axis")
textxy(Fp[,1],Fp[,2],colnames(R),cex=0.75)

ii <- which(R < 0,arr.ind = TRUE)

for(i in 1:nrow(ii)) {
  segments(Fp[ii[i,1],1],Fp[ii[i,1],2],
           Fp[ii[i,2],1],Fp[ii[i,2],2],col="red",lty="dashed")
}
@
\end{figure}

We calculate distances in the map, convert back to correlations, and compute the RMSE.

<<echo=TRUE>>=
Dest <- as.matrix(dist(Fp[,1:2]))
Rhat.mds <- 1-0.5*Dest*Dest
rmse.mds <- rmse(R,Rhat.mds,verbose=TRUE)
@

The approximation by distance worsens with respect to the representation by scalar products in PCA.

\paragraph{The PFA biplot of a correlation matrix}

Principal factor analysis can be performed by the function \code{pfa} of package \pkg{Correlplot}.

<<echo=TRUE>>=
out.pfa <- pfa(X)
L <- out.pfa$La
@ 

The biplot of the correlation matrix obtained by PFA is in fact the same as what is known as a factor loading plot in factor analysis, to which a unit circle can 
be added. The approximation to the correlation matrix and its RMSE are calculated as:

<<echo=TRUE>>=
Rhat.pfa <- L[,1:2]%*%t(L[,1:2])
rmse.pfa <- rmse(R,Rhat.pfa,verbose=TRUE)
@

To make the factor loading plot, aka PFA biplot of the correlation matrix:

\begin{figure}[htb]
\centering
<<pfaplot,echo=TRUE,fig=TRUE>>=
opar <- par(bty="n",xaxt="n",yaxt="n")
plot(L[,1],L[,2],pch=NA,asp=1,xlim=c(-1,1),ylim=c(-1,1),
     xl="Factor 1",yl="Factor 2")
origin()
arrows(0,0,L[,1],L[,2],angle=10,length=0.1,col="blue")
textxy(L[,1],L[,2],colnames(X),cex=1)
circle()
par(opar)
@ 
\end{figure}

\clearpage

The RMSE of the plot obtained by PFA is lower than the RMSE obtained by PCA. Note that
variable {\it Area} reaches the unit circle for having a communality of 1. 

\paragraph{The WALS biplot of a correlation matrix}

The correlation matrix can also be factored using weighted alternating least squares, avoiding the fit of the ones on the diagonal of the correlation matrix by assigning them weight 0, using function {\tt ipSymLS} \citep{DeLeeuw}. 

<<echo=TRUE>>=
W <- matrix(1,nrow(R),nrow(R))
diag(W) <- 0
Fp.als <- ipSymLS(R,w=W,eps=1e-15)
@


<<echo=TRUE,fig=TRUE>>=
bplot(Fp.als,Fp.als,rowch=NA,colch=NA,collab=colnames(R),
      xl=c(-1.2,1.2),yl=c(-1.2,1.2),main="WALS")
circle()
@

Weighted alternating least squares has, in contrast to PFA, no restriction on the vector length, and variable {\it Top} is seen to move out of the unit circle.

<<echo=TRUE>>=
Rhat.wals <- Fp.als%*%t(Fp.als)
rmse.als <- rmse(R,Rhat.wals,verbose=TRUE)
@

This is only slightly below the RMSE of PFA.

\paragraph{The WALS biplot of an adjusted correlation matrix}

The adjusted correlation matrix is calculated as ${\mathbf R}_a = {\mathbf R} - \delta {\mathbf J}$. By exploring the RMSE over a grid of values for $\delta$, as shown in the figure below, $\delta = 0.07$ is found to be the optimum value. 

\begin{figure}[htb]
\centering
\includegraphics[width=0.5\textwidth]{DeltaPlot.pdf}
\end{figure}

Function \code{ipSymLS} is applied to the adjusted correlation by subtracting $\delta$. When calculating the fitted correlation matrix, $\delta$ is added
back.

<<echo=TRUE,>>=
delta <- 0.07
W <- matrix(1,nrow(R),nrow(R))
diag(W) <- 0
Fp.adj <- ipSymLS(R-delta,w=W,verbose=FALSE,eps=1e-10,itmax=1000)
@


\begin{figure}[htb]
\centering
<<echo=TRUE,fig=TRUE>>=
bplot(Fp.adj,Fp.adj,rowch=NA,colch=NA,collab=colnames(R),
      xl=c(-1.3,1.3),yl=c(-1.3,1.3),main="WALS adjusted")
circle()
@
\end{figure}

The fitted correlation matrix and its RMSE are now calculated as:

<<echo=TRUE>>=
Rhat.adj <- Fp.adj%*%t(Fp.adj) + delta
rmse.adj <- rmse(R,Rhat.adj,verbose=TRUE)
@

This comes closer to the sample correlation matrix than WALS without adjustment.

\clearpage

We summarize the values of the RMSE of all methods in a table below:

<<echo=TRUE,results=tex>>=
rmsevector <- c(rmse.crg,rmse.lin,rmse.pca,rmse.mds,rmse.pfa,rmse.als,rmse.adj)
methods <- c("Correlogram (cosine)","Correlogram (linear)","PCA","MDS",
"PFA","WALS R","WALS Radj")
xtable(data.frame(methods,rmsevector),digits=c(0,0,4))
@



\clearpage

\section*{Acknowledgements}

This work was supported by the Spanish Ministry of Science, Innovation and Universities and the European Regional Development Fund under Grant RTI2018-095518-B-C22 (MCIU/AEI/FEDER); and the National Institutes of Health under Grant GM075091.

\bibliographystyle{humanbio}
\bibliography{Correlplot}

\end{document}
